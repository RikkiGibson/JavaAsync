/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.storage.implementation;

import com.microsoft.azure.storage.Blobs;
import com.microsoft.azure.storage.BlockBlobs;
import com.microsoft.azure.storage.Containers;
import com.microsoft.azure.storage.PageBlobs;
import com.microsoft.azure.storage.Services;
import com.microsoft.azure.storage.StorageClient;
import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.AzureServiceClient;
import com.microsoft.rest.v2.credentials.ServiceClientCredentials;
import com.microsoft.rest.v2.RestClient;
import com.microsoft.rest.v2.RestResponse;
import rx.Single;

/**
 * Initializes a new instance of the StorageClientImpl class.
 */
public class StorageClientImpl extends AzureServiceClient implements StorageClient {


    /** The Azure storage account to use. */
    private String accountName;

    /**
     * Gets The Azure storage account to use.
     *
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Sets The Azure storage account to use.
     *
     * @param accountName the accountName value.
     * @return the service client itself
     */
    public StorageClientImpl withAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    /** Specifies the version of the operation to use for this request. */
    private String version;

    /**
     * Gets Specifies the version of the operation to use for this request.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Sets Specifies the version of the operation to use for this request.
     *
     * @param version the version value.
     * @return the service client itself
     */
    public StorageClientImpl withVersion(String version) {
        this.version = version;
        return this;
    }

    /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */
    private String requestId;

    /**
     * Gets Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     *
     * @return the requestId value.
     */
    public String requestId() {
        return this.requestId;
    }

    /**
     * Sets Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     *
     * @param requestId the requestId value.
     * @return the service client itself
     */
    public StorageClientImpl withRequestId(String requestId) {
        this.requestId = requestId;
        return this;
    }

    /** Gets or sets the preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets Gets or sets the preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets Gets or sets the preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public StorageClientImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public StorageClientImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public StorageClientImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * The Services object to access its operations.
     */
    private Services services;

    /**
     * Gets the Services object to access its operations.
     * @return the Services object.
     */
    public Services services() {
        return this.services;
    }

    /**
     * The Containers object to access its operations.
     */
    private Containers containers;

    /**
     * Gets the Containers object to access its operations.
     * @return the Containers object.
     */
    public Containers containers() {
        return this.containers;
    }

    /**
     * The Blobs object to access its operations.
     */
    private Blobs blobs;

    /**
     * Gets the Blobs object to access its operations.
     * @return the Blobs object.
     */
    public Blobs blobs() {
        return this.blobs;
    }

    /**
     * The BlockBlobs object to access its operations.
     */
    private BlockBlobs blockBlobs;

    /**
     * Gets the BlockBlobs object to access its operations.
     * @return the BlockBlobs object.
     */
    public BlockBlobs blockBlobs() {
        return this.blockBlobs;
    }

    /**
     * The PageBlobs object to access its operations.
     */
    private PageBlobs pageBlobs;

    /**
     * Gets the PageBlobs object to access its operations.
     * @return the PageBlobs object.
     */
    public PageBlobs pageBlobs() {
        return this.pageBlobs;
    }

    /**
     * Initializes an instance of StorageClient client.
     *
     * @param credentials the management credentials for Azure
     */
    public StorageClientImpl(ServiceClientCredentials credentials) {
        this("https://{accountName}.blob.core.windows.net", credentials);
    }

    /**
     * Initializes an instance of StorageClient client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    private StorageClientImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of StorageClient client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public StorageClientImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.version = "2016-05-31";
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.services = new ServicesImpl(this);
        this.containers = new ContainersImpl(this);
        this.blobs = new BlobsImpl(this);
        this.blockBlobs = new BlockBlobsImpl(this);
        this.pageBlobs = new PageBlobsImpl(this);
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s, %s)", super.userAgent(), "StorageClient", "2016-05-31");
    }
}
