/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.storage.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.storage.Services;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.storage.models.ListContainersIncludeType;
import com.microsoft.azure.storage.models.ListContainersResponse;
import com.microsoft.azure.storage.models.ServiceGetPropertiesHeaders;
import com.microsoft.azure.storage.models.ServiceGetStatsHeaders;
import com.microsoft.azure.storage.models.ServiceListContainersHeaders;
import com.microsoft.azure.storage.models.ServiceSetPropertiesHeaders;
import com.microsoft.azure.storage.models.StorageServiceProperties;
import com.microsoft.azure.storage.models.StorageServiceStats;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Services.
 */
public class ServicesImpl implements Services {
    /** The Retrofit service to perform REST calls. */
    private ServicesService service;
    /** The service client containing this operation class. */
    private AzureBlobStorageImpl client;

    /**
     * Initializes an instance of Services.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServicesImpl(Retrofit retrofit, AzureBlobStorageImpl client) {
        this.service = retrofit.create(ServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Services to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServicesService {
        @Headers({ "Content-Type: application/xml; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.storage.Services setProperties" })
        @PUT("")
        Observable<Response<ResponseBody>> setProperties(@Body StorageServiceProperties storageServiceProperties, @Query("timeout") Integer timeout, @Header("x-ms-version") String version, @Header("x-ms-client-request-id") String requestId, @Query("restype") String restype, @Query("comp") String comp, @Header("x-ms-parameterized-host") String parameterizedHost);

        @Headers({ "Content-Type: application/xml; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.storage.Services getProperties" })
        @GET("")
        Observable<Response<ResponseBody>> getProperties(@Query("timeout") Integer timeout, @Header("x-ms-version") String version, @Header("x-ms-client-request-id") String requestId, @Query("restype") String restype, @Query("comp") String comp, @Header("x-ms-parameterized-host") String parameterizedHost);

        @Headers({ "Content-Type: application/xml; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.storage.Services getStats" })
        @GET("")
        Observable<Response<ResponseBody>> getStats(@Query("timeout") Integer timeout, @Header("x-ms-version") String version, @Header("x-ms-client-request-id") String requestId, @Query("restype") String restype, @Query("comp") String comp, @Header("x-ms-parameterized-host") String parameterizedHost);

        @Headers({ "Content-Type: application/xml; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.storage.Services listContainers" })
        @GET("")
        Observable<Response<ResponseBody>> listContainers(@Query("prefix") String prefix, @Query("marker") String marker, @Query("maxresults") Integer maxresults, @Query("include") ListContainersIncludeType include, @Query("timeout") Integer timeout, @Header("x-ms-version") String version, @Header("x-ms-client-request-id") String requestId, @Query("comp") String comp, @Header("x-ms-parameterized-host") String parameterizedHost);

    }

    /**
     * Sets properties for a storage account's Blob service endpoint, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param storageServiceProperties The StorageService properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void setProperties(StorageServiceProperties storageServiceProperties) {
        setPropertiesWithServiceResponseAsync(storageServiceProperties).toBlocking().single().body();
    }

    /**
     * Sets properties for a storage account's Blob service endpoint, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param storageServiceProperties The StorageService properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> setPropertiesAsync(StorageServiceProperties storageServiceProperties, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(setPropertiesWithServiceResponseAsync(storageServiceProperties), serviceCallback);
    }

    /**
     * Sets properties for a storage account's Blob service endpoint, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param storageServiceProperties The StorageService properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> setPropertiesAsync(StorageServiceProperties storageServiceProperties) {
        return setPropertiesWithServiceResponseAsync(storageServiceProperties).map(new Func1<ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Sets properties for a storage account's Blob service endpoint, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param storageServiceProperties The StorageService properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders>> setPropertiesWithServiceResponseAsync(StorageServiceProperties storageServiceProperties) {
        if (this.client.accountUrl() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountUrl() is required and cannot be null.");
        }
        if (storageServiceProperties == null) {
            throw new IllegalArgumentException("Parameter storageServiceProperties is required and cannot be null.");
        }
        if (this.client.version() == null) {
            throw new IllegalArgumentException("Parameter this.client.version() is required and cannot be null.");
        }
        Validator.validate(storageServiceProperties);
        final String restype = "service";
        final String comp = "properties";
        final Integer timeout = null;
        final String requestId = null;
        String parameterizedHost = Joiner.on(", ").join("{accountUrl}", this.client.accountUrl());
        return service.setProperties(storageServiceProperties, timeout, this.client.version(), requestId, restype, comp, parameterizedHost)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders> clientResponse = setPropertiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Sets properties for a storage account's Blob service endpoint, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param storageServiceProperties The StorageService properties.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void setProperties(StorageServiceProperties storageServiceProperties, Integer timeout, String requestId) {
        setPropertiesWithServiceResponseAsync(storageServiceProperties, timeout, requestId).toBlocking().single().body();
    }

    /**
     * Sets properties for a storage account's Blob service endpoint, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param storageServiceProperties The StorageService properties.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> setPropertiesAsync(StorageServiceProperties storageServiceProperties, Integer timeout, String requestId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(setPropertiesWithServiceResponseAsync(storageServiceProperties, timeout, requestId), serviceCallback);
    }

    /**
     * Sets properties for a storage account's Blob service endpoint, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param storageServiceProperties The StorageService properties.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> setPropertiesAsync(StorageServiceProperties storageServiceProperties, Integer timeout, String requestId) {
        return setPropertiesWithServiceResponseAsync(storageServiceProperties, timeout, requestId).map(new Func1<ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Sets properties for a storage account's Blob service endpoint, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param storageServiceProperties The StorageService properties.
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders>> setPropertiesWithServiceResponseAsync(StorageServiceProperties storageServiceProperties, Integer timeout, String requestId) {
        if (this.client.accountUrl() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountUrl() is required and cannot be null.");
        }
        if (storageServiceProperties == null) {
            throw new IllegalArgumentException("Parameter storageServiceProperties is required and cannot be null.");
        }
        if (this.client.version() == null) {
            throw new IllegalArgumentException("Parameter this.client.version() is required and cannot be null.");
        }
        Validator.validate(storageServiceProperties);
        final String restype = "service";
        final String comp = "properties";
        String parameterizedHost = Joiner.on(", ").join("{accountUrl}", this.client.accountUrl());
        return service.setProperties(storageServiceProperties, timeout, this.client.version(), requestId, restype, comp, parameterizedHost)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders> clientResponse = setPropertiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, ServiceSetPropertiesHeaders> setPropertiesDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .buildWithHeaders(response, ServiceSetPropertiesHeaders.class);
    }

    /**
     * gets the properties of a storage account's Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageServiceProperties object if successful.
     */
    public StorageServiceProperties getProperties() {
        return getPropertiesWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * gets the properties of a storage account's Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageServiceProperties> getPropertiesAsync(final ServiceCallback<StorageServiceProperties> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getPropertiesWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * gets the properties of a storage account's Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageServiceProperties object
     */
    public Observable<StorageServiceProperties> getPropertiesAsync() {
        return getPropertiesWithServiceResponseAsync().map(new Func1<ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders>, StorageServiceProperties>() {
            @Override
            public StorageServiceProperties call(ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * gets the properties of a storage account's Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageServiceProperties object
     */
    public Observable<ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders>> getPropertiesWithServiceResponseAsync() {
        if (this.client.accountUrl() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountUrl() is required and cannot be null.");
        }
        if (this.client.version() == null) {
            throw new IllegalArgumentException("Parameter this.client.version() is required and cannot be null.");
        }
        final String restype = "service";
        final String comp = "properties";
        final Integer timeout = null;
        final String requestId = null;
        String parameterizedHost = Joiner.on(", ").join("{accountUrl}", this.client.accountUrl());
        return service.getProperties(timeout, this.client.version(), requestId, restype, comp, parameterizedHost)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders> clientResponse = getPropertiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * gets the properties of a storage account's Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageServiceProperties object if successful.
     */
    public StorageServiceProperties getProperties(Integer timeout, String requestId) {
        return getPropertiesWithServiceResponseAsync(timeout, requestId).toBlocking().single().body();
    }

    /**
     * gets the properties of a storage account's Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageServiceProperties> getPropertiesAsync(Integer timeout, String requestId, final ServiceCallback<StorageServiceProperties> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getPropertiesWithServiceResponseAsync(timeout, requestId), serviceCallback);
    }

    /**
     * gets the properties of a storage account's Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageServiceProperties object
     */
    public Observable<StorageServiceProperties> getPropertiesAsync(Integer timeout, String requestId) {
        return getPropertiesWithServiceResponseAsync(timeout, requestId).map(new Func1<ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders>, StorageServiceProperties>() {
            @Override
            public StorageServiceProperties call(ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * gets the properties of a storage account's Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     *
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageServiceProperties object
     */
    public Observable<ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders>> getPropertiesWithServiceResponseAsync(Integer timeout, String requestId) {
        if (this.client.accountUrl() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountUrl() is required and cannot be null.");
        }
        if (this.client.version() == null) {
            throw new IllegalArgumentException("Parameter this.client.version() is required and cannot be null.");
        }
        final String restype = "service";
        final String comp = "properties";
        String parameterizedHost = Joiner.on(", ").join("{accountUrl}", this.client.accountUrl());
        return service.getProperties(timeout, this.client.version(), requestId, restype, comp, parameterizedHost)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders> clientResponse = getPropertiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<StorageServiceProperties, ServiceGetPropertiesHeaders> getPropertiesDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StorageServiceProperties, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StorageServiceProperties>() { }.getType())
                .buildWithHeaders(response, ServiceGetPropertiesHeaders.class);
    }

    /**
     * Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageServiceStats object if successful.
     */
    public StorageServiceStats getStats() {
        return getStatsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageServiceStats> getStatsAsync(final ServiceCallback<StorageServiceStats> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getStatsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageServiceStats object
     */
    public Observable<StorageServiceStats> getStatsAsync() {
        return getStatsWithServiceResponseAsync().map(new Func1<ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders>, StorageServiceStats>() {
            @Override
            public StorageServiceStats call(ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageServiceStats object
     */
    public Observable<ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders>> getStatsWithServiceResponseAsync() {
        if (this.client.accountUrl() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountUrl() is required and cannot be null.");
        }
        if (this.client.version() == null) {
            throw new IllegalArgumentException("Parameter this.client.version() is required and cannot be null.");
        }
        final String restype = "service";
        final String comp = "stats";
        final Integer timeout = null;
        final String requestId = null;
        String parameterizedHost = Joiner.on(", ").join("{accountUrl}", this.client.accountUrl());
        return service.getStats(timeout, this.client.version(), requestId, restype, comp, parameterizedHost)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders> clientResponse = getStatsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account.
     *
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageServiceStats object if successful.
     */
    public StorageServiceStats getStats(Integer timeout, String requestId) {
        return getStatsWithServiceResponseAsync(timeout, requestId).toBlocking().single().body();
    }

    /**
     * Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account.
     *
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageServiceStats> getStatsAsync(Integer timeout, String requestId, final ServiceCallback<StorageServiceStats> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getStatsWithServiceResponseAsync(timeout, requestId), serviceCallback);
    }

    /**
     * Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account.
     *
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageServiceStats object
     */
    public Observable<StorageServiceStats> getStatsAsync(Integer timeout, String requestId) {
        return getStatsWithServiceResponseAsync(timeout, requestId).map(new Func1<ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders>, StorageServiceStats>() {
            @Override
            public StorageServiceStats call(ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account.
     *
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageServiceStats object
     */
    public Observable<ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders>> getStatsWithServiceResponseAsync(Integer timeout, String requestId) {
        if (this.client.accountUrl() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountUrl() is required and cannot be null.");
        }
        if (this.client.version() == null) {
            throw new IllegalArgumentException("Parameter this.client.version() is required and cannot be null.");
        }
        final String restype = "service";
        final String comp = "stats";
        String parameterizedHost = Joiner.on(", ").join("{accountUrl}", this.client.accountUrl());
        return service.getStats(timeout, this.client.version(), requestId, restype, comp, parameterizedHost)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders> clientResponse = getStatsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<StorageServiceStats, ServiceGetStatsHeaders> getStatsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StorageServiceStats, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StorageServiceStats>() { }.getType())
                .buildWithHeaders(response, ServiceGetStatsHeaders.class);
    }

    /**
     * The List Containers operation returns a list of the containers under the specified account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListContainersResponse object if successful.
     */
    public ListContainersResponse listContainers() {
        return listContainersWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * The List Containers operation returns a list of the containers under the specified account.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ListContainersResponse> listContainersAsync(final ServiceCallback<ListContainersResponse> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listContainersWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * The List Containers operation returns a list of the containers under the specified account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListContainersResponse object
     */
    public Observable<ListContainersResponse> listContainersAsync() {
        return listContainersWithServiceResponseAsync().map(new Func1<ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders>, ListContainersResponse>() {
            @Override
            public ListContainersResponse call(ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * The List Containers operation returns a list of the containers under the specified account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListContainersResponse object
     */
    public Observable<ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders>> listContainersWithServiceResponseAsync() {
        if (this.client.accountUrl() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountUrl() is required and cannot be null.");
        }
        if (this.client.version() == null) {
            throw new IllegalArgumentException("Parameter this.client.version() is required and cannot be null.");
        }
        final String comp = "list";
        final String prefix = null;
        final String marker = null;
        final Integer maxresults = null;
        final ListContainersIncludeType include = null;
        final Integer timeout = null;
        final String requestId = null;
        String parameterizedHost = Joiner.on(", ").join("{accountUrl}", this.client.accountUrl());
        return service.listContainers(prefix, marker, maxresults, include, timeout, this.client.version(), requestId, comp, parameterizedHost)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders> clientResponse = listContainersDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * The List Containers operation returns a list of the containers under the specified account.
     *
     * @param prefix Filters the results to return only containers whose name begins with the specified prefix.
     * @param marker A string value that identifies the portion of the list of containers to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all containers remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client.
     * @param maxresults Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible that the service will return fewer results than specified by maxresults, or than the default of 5000.
     * @param include Include this parameter to specify that the container's metadata be returned as part of the response body. Possible values include: 'metadata'
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListContainersResponse object if successful.
     */
    public ListContainersResponse listContainers(String prefix, String marker, Integer maxresults, ListContainersIncludeType include, Integer timeout, String requestId) {
        return listContainersWithServiceResponseAsync(prefix, marker, maxresults, include, timeout, requestId).toBlocking().single().body();
    }

    /**
     * The List Containers operation returns a list of the containers under the specified account.
     *
     * @param prefix Filters the results to return only containers whose name begins with the specified prefix.
     * @param marker A string value that identifies the portion of the list of containers to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all containers remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client.
     * @param maxresults Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible that the service will return fewer results than specified by maxresults, or than the default of 5000.
     * @param include Include this parameter to specify that the container's metadata be returned as part of the response body. Possible values include: 'metadata'
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ListContainersResponse> listContainersAsync(String prefix, String marker, Integer maxresults, ListContainersIncludeType include, Integer timeout, String requestId, final ServiceCallback<ListContainersResponse> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listContainersWithServiceResponseAsync(prefix, marker, maxresults, include, timeout, requestId), serviceCallback);
    }

    /**
     * The List Containers operation returns a list of the containers under the specified account.
     *
     * @param prefix Filters the results to return only containers whose name begins with the specified prefix.
     * @param marker A string value that identifies the portion of the list of containers to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all containers remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client.
     * @param maxresults Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible that the service will return fewer results than specified by maxresults, or than the default of 5000.
     * @param include Include this parameter to specify that the container's metadata be returned as part of the response body. Possible values include: 'metadata'
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListContainersResponse object
     */
    public Observable<ListContainersResponse> listContainersAsync(String prefix, String marker, Integer maxresults, ListContainersIncludeType include, Integer timeout, String requestId) {
        return listContainersWithServiceResponseAsync(prefix, marker, maxresults, include, timeout, requestId).map(new Func1<ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders>, ListContainersResponse>() {
            @Override
            public ListContainersResponse call(ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * The List Containers operation returns a list of the containers under the specified account.
     *
     * @param prefix Filters the results to return only containers whose name begins with the specified prefix.
     * @param marker A string value that identifies the portion of the list of containers to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all containers remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client.
     * @param maxresults Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary, then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible that the service will return fewer results than specified by maxresults, or than the default of 5000.
     * @param include Include this parameter to specify that the container's metadata be returned as part of the response body. Possible values include: 'metadata'
     * @param timeout The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;
     * @param requestId Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListContainersResponse object
     */
    public Observable<ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders>> listContainersWithServiceResponseAsync(String prefix, String marker, Integer maxresults, ListContainersIncludeType include, Integer timeout, String requestId) {
        if (this.client.accountUrl() == null) {
            throw new IllegalArgumentException("Parameter this.client.accountUrl() is required and cannot be null.");
        }
        if (this.client.version() == null) {
            throw new IllegalArgumentException("Parameter this.client.version() is required and cannot be null.");
        }
        final String comp = "list";
        String parameterizedHost = Joiner.on(", ").join("{accountUrl}", this.client.accountUrl());
        return service.listContainers(prefix, marker, maxresults, include, timeout, this.client.version(), requestId, comp, parameterizedHost)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders> clientResponse = listContainersDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<ListContainersResponse, ServiceListContainersHeaders> listContainersDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ListContainersResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ListContainersResponse>() { }.getType())
                .buildWithHeaders(response, ServiceListContainersHeaders.class);
    }

}
